---
title: "One workflow for building effective (and pretty) `{ggplot2}` data visualizations"
author: Sam Csik
date: March 16, 2022
format: 
  html:
    theme: minty
    toc: true
    toc-location: left
editor_options: 
  chunk_output_type: console
---

<br>

:::: {.grid}
::: {.g-col-12 .g-col-md-3}
![](media/ggplot2_hex.png){fig-align="center"}
:::

::: {.g-col-12 .g-col-md-9}
`{ggplot2}` has, in many ways, become the de facto tool for data visualization in R. And with the *many* extension packages available, there's hardly a limit to what you can create. Building effective and visually-pleasing data visualizations is a skill that gets easier with practice, and following a somewhat structured workflow -- at least at the start -- can help you get there faster. This workshop covers one approach for doing so, though you'll find what works best for you with time.
:::
::::

Below, you'll find three different examples, beginning with an assessment of the raw data and ending with a completed visualization. Here's a sneak peak of what we'll be creating:

::: panel-tabset

## **`r fontawesome::fa("temperature-quarter", fill = "#5A5A5A", a11y = "sem")` Ex 1:** Ocean Temperatures

```{r}
#| eval: true
#| echo: false
#| message: false
#| fig-align: center
#..........................load packages.........................
library(tidyverse)
library(ggridges)

#..........................read in data..........................
mko_clean <- readRDS(here::here("clean-data", "mohawk_temps.rds"))

#.......................calculate avg temp.......................
mko_avg <- mko_clean |>
  summarize(mean_temp = round(mean(Temp_bot, na.rm = TRUE), 1)) |>
  pull()

#..............................plot..............................
mko_ridges_plot <- mko_clean |>
  
  # group by month ----
  group_by(month_name) |>
  
  # create ridgeline plot ----
  ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) + # rel_min_height cuts trailing tails (0.01 suggested); scale sets extent of overlap
  
  # add vertical line at avg temp + annotation
  geom_vline(xintercept = mko_avg, linetype = "dashed", color = "black") +
  annotate(geom = "segment", x = 18, y = "April", xend = mko_avg, yend = "May",
           arrow = arrow(length = unit(3, "mm"))) + # this is mostly just a bunch of manual fiddling until the arrow is placed where I want it
  annotate(geom = "label", x = 18, y = "April", label = paste0(" Avg Temp = ", mko_avg, "째C"), hjust = "left") + # same here
  
  # set x-axis breaks ----
  scale_x_continuous(breaks = c(9, 12, 15, 18, 21)) +
  
  # arrange months in reverse chronological order ----
  scale_y_discrete(limits = rev(month.name)) +
  
  # fill color ----
  scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A"), name = "Temp. (째C)") +
  
  # update labs & titles ----
  labs(x = "Bottom Temperature (째C)",
       title = "Bottom Temperatures at Mohawk Reef, Santa Barbara, CA",
       subtitle = "Temperatures (째C) aggregated by month from 2005 - 2022") +
  
  # apply theme ----
  ggridges::theme_ridges(font_size = 13, grid = TRUE) +
  
  # adjust theme options ----
  theme(
    axis.title.y = element_blank()
  )

mko_ridges_plot
```

**This ocean temperatures plot explores the following tools & approaches:**

- a ggplot extension package, `{ggridges}`, to create a ridge line plot
- styling a plot with a pre-built theme
- adding an annotation layer

## **`r fontawesome::fa("money-bill-1", fill = "#5A5A5A", a11y = "sem")` Ex 2:** Wages

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#..........................load packages.........................
library(tidyverse)
library(scales)
library(ggtext)

#..........................import data...........................
# use this dataset if you want to explore all occupations included in the original TidyTuesday dataset
# all_jobs <- readRDS(here::here("clean-data", "all_jobs.rds")) 
# filtered data for plotting (original data contains too many to plot at once)
# includes only 10 occupations from each of the following categories (occupations that are 75%+ women, 45-55% women, and 75%+ men)
select_jobs <- readRDS(here::here("clean-data", "select_jobs.rds")) 

#..............................plot..............................
# initialize ggplot ----
earnings_plot <- ggplot(select_jobs) +
  
  # create dumbbells ----
  geom_segment(aes(x = total_earnings_female, xend = total_earnings_male, 
                   y = fct_reorder(occupation, avg_salary), yend = occupation)) +
  geom_point(aes(x = total_earnings_male, y = occupation), color = "#CD93D8", size = 2.5) +
  geom_point(aes(x = total_earnings_female, y = occupation), color = "#6A1E99", size = 2.5) +
  
  # acet wrap by group ----
  facet_wrap(~perc_group_label, nrow = 3, scales = "free_y") + # "free_y" plots only the axis labels that exist in each group
  
  # axis breaks & $ labels ----
  scale_x_continuous(breaks = c(25000, 50000, 75000, 100000, 125000),
                     labels = scales::label_dollar(scale = 0.001, suffix = "k")) + 
  
  # title & subtitle (add styling) ----
  labs(title = "**Earnings by Occupation and Sex**",
       subtitle = "Median earnings of full-time <span style='color:#CD93D8;'>**male**</span> versus <span style='color:#6A1E99;'>**female**</span> workers by occupation in 2016",
       caption = "<span style='color:#919092;'>*Data courtesy of TidyTuesday (March 5, 2019)*</span>") +
  
  # set theme ----
  theme_minimal() +
  
  # customize theme ----
  theme(
  
    # facet panels 
    strip.text.x = element_text(face = "bold"),
  
    # title & subtitle 
    plot.title.position = "plot", # left-align plot title with left-edge of plot, not y-axis (see: https://github.com/tidyverse/ggplot2/issues/3252)
    plot.title = ggtext::element_textbox_simple(size = 20, padding = margin(t = 0, r = 0, b = 10, l = 0)), # enables markdown text & creates textbox
    plot.subtitle = ggtext::element_textbox_simple(size = 13, padding = margin(t = 0, r = 0, b = 10, l = 0)), # enable markdown text & creates textbox
    plot.caption = ggtext::element_markdown(margin = margin(t = 15, r = 0, b = 0, l = 0)), # enable markdown text 
  
    # axes 
    axis.title = element_blank(),
  
  )

earnings_plot
```

**This wages plot explores the following tools and approaches:**

- facet wrapping panels by groups of data
- the `{scales}` package for modifying axis labels
- the `{ggtext}` package for applying css styling to plot text
- modifying components of a plot's theme

## **`r fontawesome::fa("sun-plant-wilt", fill = "#5A5A5A", a11y = "sem")` Ex 3:** CA Drought

```{r}
#| eval: true
#| echo: false
#| message: false
#| warning: false
#..........................load packages.........................
library(tidyverse)
library(cowplot)
library(showtext)

#..........................read in data..........................
drought_clean <- readRDS(here::here("clean-data", "us_drought.rds"))

#......................import google fonts.......................
# load Google Fonts: https://fonts.google.com/ ----
sysfonts::font_add_google(name = "Alfa Slab One", family = "alfa") # name = name as it appears on Google Fonts; family = a string that you'll refer to your imported font by
sysfonts::font_add_google(name = "Sen", family = "sen")

# automatically use {showtext} to render text for future devices ----
showtext::showtext_auto()

# tell showtext the resolution for the device ----
showtext::showtext_opts(dpi = 300)

#..........................color palette.........................
colors <- c("#4D1212", "#9A2828", "#DE5A2C", "#DE922C", "#DEC02C", 
                     "#152473", "#243CB9", "#5287DE", "#77A3EA", "#ABCAFA")
                     
#..............................plot..............................
ca_plot <- drought_clean |>
  
  # filter for CA ----
  filter(state_abb == "CA") |> 
  
  # make wet condition values negative by multiplying by -1 ----
  mutate(perc_area = ifelse(test = grepl("D", condition) == TRUE, yes = perc_area, no = perc_area * -1)) |>
  
  # initialize ggplot ----
  ggplot(aes(x = date, y = perc_area, fill = condition_long)) + 
  
  # create stacked area chart & horizontal lines ----
  geom_area() +
  geom_hline(yintercept = 100, color = "#303030", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = 50, color = "#5B5B5B", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = -50, color = "#5B5B5B", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = -100, color = "#303030", alpha = 0.55, linetype = 2) +
  
  # set colors ----
  scale_fill_manual(values = colors) +
  
  # labs & titles ----
  labs(title = "Drought vs. Wet Conditions Across California",
       subtitle = "Percent area experiencing drought versus wet conditions from 2012 to 2022") +
  
  # set theme ----
  theme_classic() +
  
  # customize theme ----
  theme(
  
    # background colors 
    plot.background = element_rect(fill = "#9B9B9B", color = "#9B9B9B"), 
    panel.background = element_rect(fill = "#9B9B9B", color = "#9B9B9B"),
  
    # titles 
    plot.title = element_text(color = "#303030", family = "alfa", size = 17, margin = margin(t = 5, r = 10, b = 5, l = 0)), 
    plot.subtitle = element_text(color = "#303030", family = "sen", size = 13, margin = margin(t = 5, r = 10, b = 20, l = 0)), 
  
    # legend 
    legend.direction = "horizontal",
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(color = "#303030", family = "sen", size = 8.5), 
    legend.background = element_rect(fill = "#9B9B9B", color = "#9B9B9B"),
    legend.key.width = unit(3, 'cm'),
  
    # axes 
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.line = element_blank(),
    axis.ticks = element_blank()
    
  ) +
  
  # update legend layout ----
  guides(fill = guide_legend(nrow = 2, byrow = TRUE, reverse = FALSE,
                             label.position = "bottom")) 

#........................add annotations.........................

annotated_ca_plot <- cowplot::ggdraw(ca_plot) +
  cowplot::draw_text(x = 0.915, y = 0.836, color = "#303030", text = "100% Drought", family = "sen", size = 11, fontface = "bold") + 
  cowplot::draw_text(x = 0.92, y = 0.71, color = "#5B5B5B", text = "50% Drought", family = "sen", size = 11, fontface = "bold") + 
  cowplot::draw_text(x = 0.945, y = 0.47, color = "#5B5B5B", text = "50% Wet", family = "sen", size = 11, fontface = "bold") + 
  cowplot::draw_text(x = 0.94, y = 0.35, color = "#303030", text = "100% Wet", family = "sen", size = 11, fontface = "bold") 

annotated_ca_plot
```

**This drought plot explores the following tools & approaches:**

- the `{cowplot}` package for adding annotations
- the `{showtext}` package for loading & applying Google fonts
- modifying (even more) components of a plot's theme

:::

::: callout-note
## There are many ways to create the same visualization!
It's important to remember that there are lots of different tools, packages, and approaches for building similarly-looking plots. My approach may not be what makes most intuitive sense to you -- I encourage you to explore documentation and additional examples!
:::

If you need a high-level `{ggplot2}` review and/or a reminder of important considerations for building responsible data visualizations, take a look back at Allison Horst's lectures [15](https://docs.google.com/presentation/d/e/2PACX-1vSpUdai7BTXprh3dwSNBpJymNGUIOFhEgQn5XbQWZhWy8EpUyd64Lem08YK_kc6tP0iyoJ5wRAVvSYe/pub?start=false&loop=false&delayms=3000&slide=id.p) and [16](https://docs.google.com/presentation/d/e/2PACX-1vR1QB0S3AfBfdJZ1nnhUw2iKSxV83GDc5l9BYPC6yQhxBdnzRpAAZ2lh7QWhX4kY65Uf_q0yK9FtHmW/pub?start=false&loop=false&delayms=3000&slide=id.p) from EDS 221.

::: callout-important
## Option: Fork the **ggplot2-workflow-template** GitHub repo
You may fork the [ggplot2-workflow-template](https://github.com/UCSB-MEDS/ggplot2-workflow-template), which contains the cleaned data files used for each of the three example visualizations. Alternatively, download them individually here: [`mohawk_temps.rds`](https://github.com/UCSB-MEDS/ggplot2-workflow/blob/main/clean-data/mohawk_temps.rds) (Ex 1: Ocean Temperatures), [`all_jobs.rds`](https://github.com/UCSB-MEDS/ggplot2-workflow/blob/main/clean-data/all_jobs.rds) & [`select_jobs.rds`](https://github.com/UCSB-MEDS/ggplot2-workflow/blob/main/clean-data/select_jobs.rds) (Ex 2: Wages), [`us_drought.rds`](https://github.com/UCSB-MEDS/ggplot2-workflow/blob/main/clean-data/us_drought.rds) (Ex 3: CA Drought).
:::

{{< include /sections/1-determine-data-types.qmd >}}

{{< include /sections/2-determine-graph-types.qmd >}}

{{< include /sections/3-create-basic-plot.qmd >}}

{{< include /sections/4-improve-readability.qmd >}}

{{< include /sections/5-final-touches.qmd >}}

{{< include /sections/6-notes.qmd >}}

{{< include /sections/7-practice-review.qmd >}}

