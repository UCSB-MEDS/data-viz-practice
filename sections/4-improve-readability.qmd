---
format: html
---

## `r fontawesome::fa("lightbulb", fill = "#5A5A5A", a11y = "sem")` Step 4. Improve clarity & take-home message(s)

::: panel-tabset

## **`r fontawesome::fa("temperature-quarter", fill = "#5A5A5A", a11y = "sem")` Ex 1:** Ocean Temperatures

We've successfully plotted our temperature data, but we'll want to update the following so that our visualization is easier to interpret: 

- order months chronologically
- apply an intuitive color gradient scale

We might also choose to:

- highlight a particular benchmark temperature(s) (e.g. the average bottom temperature across our data set) -- adding a vertical line and annotations is a great option for this 
- explore `geom_density_ridges_gradient()` argument options to modify the appearance of our ridges

```{r}
#| eval: true
#| echo: true
#| message: false
#..........................load packages.........................
library(tidyverse)
library(ggridges)

#..........................read in data..........................
mko_clean <- readRDS(here::here("clean-data", "mohawk_temps.rds"))

#.......................calculate avg temp.......................
mko_avg <- mko_clean |> 
  summarize(mean_temp = round(mean(Temp_bot, na.rm = TRUE), 1)) |> 
  pull() 

#..............................plot..............................
mko_ridges_plot <- mko_clean |> 
  group_by(month_name) |> 
  
  
  # initialize ggplot ----
  ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  
  # create ridgeline plot ----
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) + # rel_min_height cuts trailing tails (0.01 suggested); scale sets extent of overlap
  
  # add vertical line at avg temp + annotation ----
  geom_vline(xintercept = mko_avg, linetype = "dashed", color = "black") +
  annotate(geom = "segment", x = 18, y = "April", xend = mko_avg, yend = "May",
           arrow = arrow(length = unit(3, "mm"))) + # this is mostly just a bunch of manual fiddling until the arrow is placed where I want it
  annotate(geom = "text", x = 18, y = "April", label = paste0(" Avg Temp = ", mko_avg, "°C"), hjust = "left") + # same here

  # set x-axis breaks ----
  scale_x_continuous(breaks = c(9, 12, 15, 18, 21)) +
  
  # arrange months in reverse chronological order ----
  scale_y_discrete(limits = rev(month.name)) + 
  
  # fill color ----
  scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A"), name = "Temp. (°C)") 

mko_ridges_plot
```

## **`r fontawesome::fa("tree-city", fill = "#5A5A5A", a11y = "sem")` Ex 2:** Urban Trees

## **`r fontawesome::fa("sun", fill = "#5A5A5A", a11y = "sem")` Ex 3.** CA Drought

We've successfully plotted our drought vs. wet condition data through time for California, but we'll want to update the following so that our visualization is easier to interpret:

- create a more intuitive color palette

We might also choose to: 

- highlight particular benchmark area cover percentages (e.g. 100% area cover affected by drought conditions) -- adding a horizontal line(s) is a great option for this

Here, we'll use the [`{cowplot}` package](https://github.com/wilkelab/cowplot) to add annotations to our plot:

```{r}
#| eval: true
#| echo: true
#| message: false
#..........................load packages.........................
library(tidyverse)
library(cowplot)

#..........................read in data..........................
drought_clean <- readRDS(here::here("clean-data", "us_drought.rds"))

#..........................color palette.........................
colors <- c("#4D1212", "#9A2828", "#DE5A2C", "#DE922C", "#DEC02C", 
            "#152473", "#243CB9", "#5287DE", "#77A3EA", "#ABCAFA")

#..............................plot..............................
ca_plot <- drought_clean |>
  
  # filter for CA ----
  filter(state_abb == "CA") |> 
  
  # make wet condition values negative by multiplying by -1 ----
  mutate(perc_area = ifelse(test = grepl("D", condition) == T, yes = perc_area, no = perc_area * -1)) |>
  
  # initialize ggplot ----
  ggplot(aes(x = date, y = perc_area, fill = condition_long)) + 
  
  # create stacked area chart & horizontal lines ----
  geom_area() +
  geom_hline(yintercept = 100, color = "#303030", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = 50, color = "#5B5B5B", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = -50, color = "#5B5B5B", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = -100, color = "#303030", alpha = 0.55, linetype = 2) +
  
  # set colors ----
  scale_fill_manual(values = colors)

ca_plot

```

:::