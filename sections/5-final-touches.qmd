---
format: html
---

## `r fontawesome::fa("palette", fill = "#5A5A5A", a11y = "sem")` Step 5. Final touches / polishing

::: panel-tabset

## **`r fontawesome::fa("temperature-quarter", fill = "#5A5A5A", a11y = "sem")` Ex 1:** Ocean Temperatures

Finally, we can update labels/titles, apply a pre-built theme and/or update `theme()` options to our liking to polish up our visualization. The `{ggridges}` package includes a pre-built theme that's meant to work nicely with ridgeline plots, so we'll use that here:

```{r}
#| eval: true
#| echo: true
#| message: false
#..........................load packages.........................
library(tidyverse)
library(ggridges)

#..........................read in data..........................
mko_clean <- readRDS(here::here("clean-data", "mohawk_temps.rds"))

#.......................calculate avg temp.......................
mko_avg <- mko_clean |> 
  summarize(mean_temp = round(mean(Temp_bot, na.rm = TRUE), 1)) |> 
  pull() 

#..............................plot..............................
mko_ridges_plot <- mko_clean |> 
  group_by(month_name) |> 
  
  # initialize ggplot ----
  ggplot(aes(x = Temp_bot, y = month_name, fill = after_stat(x))) +
  
  # create ridgeline plot ----
  ggridges::geom_density_ridges_gradient(rel_min_height = 0.01, scale = 3) + # rel_min_height cuts trailing tails (0.01 suggested); scale sets extent of overlap
  
  # add vertical line at avg temp + annotation
  geom_vline(xintercept = mko_avg, linetype = "dashed", color = "black") +
  annotate(geom = "segment", x = 18, y = "April", xend = mko_avg, yend = "May",
           arrow = arrow(length = unit(3, "mm"))) + # this is mostly just a bunch of manual fiddling until the arrow is placed where I want it
  annotate(geom = "text", x = 18, y = "April", label = paste0(" Avg Temp = ", mko_avg, "째C"), hjust = "left") + # same here

  # set x-axis breaks ----
  scale_x_continuous(breaks = c(9, 12, 15, 18, 21)) +
  
  # arrange months in reverse chronological order ----
  scale_y_discrete(limits = rev(month.name)) + 
  
  # fill color ----
  scale_fill_gradientn(colors = c("#2C5374","#778798", "#ADD8E6", "#EF8080", "#8B3A3A"), name = "Temp. (째C)") +
  
  # update labs & titles ----
  labs(x = "Bottom Temperature (째C)",
       title = "Bottom Temperatures at Mohawk Reef, Santa Barbara, CA",
       subtitle = "Temperatures (째C) aggregated by month from 2005 - 2022") +
  
  # apply theme ----
  ggridges::theme_ridges(font_size = 13, grid = TRUE) +
  
  # adjust theme options ----
  theme(
    axis.title.y = element_blank()
  )

mko_ridges_plot
```

## **`r fontawesome::fa("sun", fill = "#5A5A5A", a11y = "sem")` Ex 2:** CA Drought

Finally, we can update labels/titles, move/modify the appearance of our legend, and get creative by building a fully custom theme -- this requires some patience and a lot of fiddling. The [`{showtext} package`](https://github.com/yixuan/showtext) allows you to import [Google Fonts](https://fonts.google.com/) to use throughout your plot and requires a bit of setup at the start (see code below).

Inspired by previous #tidytuesday submissions, I'm going to take a few more creative liberties (e.g. removing axes) with this plot than I did the last:

```{r}
#| eval: true
#| echo: true
#| message: false
#| warning: false
#..........................load packages.........................
library(tidyverse)
library(cowplot)
library(showtext)

#..........................read in data..........................
drought_clean <- readRDS(here::here("clean-data", "us_drought.rds"))

#......................import google fonts.......................
# load Google Fonts: https://fonts.google.com/ ----
sysfonts::font_add_google(name = "Alfa Slab One", family = "alfa") # name = name as it appears on Google Fonts; family = a string that you'll refer to your imported font by
sysfonts::font_add_google(name = "Sen", family = "sen")

# automatically use {showtext} to render text for future devices ----
showtext::showtext_auto()

# tell showtext the resolution for the device ----
showtext::showtext_opts(dpi = 300)

#..........................color palette.........................
colors <- c("#4D1212", "#9A2828", "#DE5A2C", "#DE922C", "#DEC02C", 
            "#152473", "#243CB9", "#5287DE", "#77A3EA", "#ABCAFA")

#..............................plot..............................
ca_plot <- drought_clean |>
  
  # filter for CA ----
  filter(state_abb == "CA") |> 
  
  # make wet condition values negative by multiplying by -1 ----
  mutate(perc_area = ifelse(test = grepl("D", condition) == T, yes = perc_area, no = perc_area * -1)) |>
  
  # initialize ggplot ----
  ggplot(aes(x = date, y = perc_area, fill = condition_long)) + 
  
  # create stacked area chart & horizontal lines ----
  geom_area() +
  geom_hline(yintercept = 100, color = "#303030", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = 50, color = "#5B5B5B", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = -50, color = "#5B5B5B", alpha = 0.55, linetype = 2) +
  geom_hline(yintercept = -100, color = "#303030", alpha = 0.55, linetype = 2) +
  
  # set colors ----
  scale_fill_manual(values = colors) +
  
  # labs & titles ----
  labs(y = "% area",
       title = "Drought vs. Wet Conditions Across California",
       subtitle = "Percent area experiencing drought versus wet conditions from 2012 to 2022") +
  
  # set theme ----
  theme_classic() +
  
  # customize theme ----
  theme(
    
    # background colors 
    plot.background = element_rect(fill = "#9B9B9B", color = "#9B9B9B"), 
    panel.background = element_rect(fill = "#9B9B9B", color = "#9B9B9B"),
    
    # titles 
    plot.title = element_text(color = "#303030", family = "alfa", size = 17, margin = margin(t = 5, r = 10, b = 5, l = 0)), 
    plot.subtitle = element_text(color = "#303030", family = "sen", size = 13, margin = margin(t = 0, r = 10, b = 20, l = 0)), 
    
    # legend 
    legend.direction = "horizontal",
    legend.position = "bottom",
    legend.title = element_blank(),
    legend.text = element_text(color = "#303030", family = "sen", size = 8.5), # family = "sen", 
    legend.background = element_rect(fill = "#9B9B9B", color = "#9B9B9B"),
    legend.key.width = unit(3, 'cm'),
    
    # axes 
    axis.title = element_blank(),
    axis.text.y = element_blank(),
    axis.text.x = element_text(size = 10),
    axis.line = element_blank(),
    axis.ticks = element_blank()
  ) +
  
  # update legend layout ----
  guides(fill = guide_legend(nrow = 2, byrow = TRUE, reverse = FALSE,
                             label.position = "bottom")) 

#........................add annotations.........................
annotated_ca_plot <- cowplot::ggdraw(ca_plot) +
  cowplot::draw_text(x = 0.915, y = 0.837, color = "#303030", text = "100% Drought", family = "sen", size = 11, fontface = "bold") + 
  cowplot::draw_text(x = 0.92, y = 0.71, color = "#5B5B5B", text = "50% Drought", family = "sen", size = 11, fontface = "bold") + 
  cowplot::draw_text(x = 0.945, y = 0.47, color = "#5B5B5B", text = "50% Wet", family = "sen", size = 11, fontface = "bold") + 
  cowplot::draw_text(x = 0.94, y = 0.35, color = "#303030", text = "100% Wet", family = "sen", size = 11, fontface = "bold") 

annotated_ca_plot
```

::: callout-note
## **Bonus!** Check out the [`{geofacet}` package](https://github.com/hafen/geofacet/) for arranging plots in the shape of the US (or other regions).

A small, unrefined plot as an example: 

```{r}
#| eval: true
#| echo: true
#| message: false
#..........................load packages.........................
library(tidyverse)
library(geofacet)

#..........................read in data..........................
drought_clean <- readRDS(here::here("clean-data", "us_drought.rds"))

#........................plot all states.........................
# remove HI (no data), AK (no data), DC (I just don't want to include this) from preset grid ---
mygrid <- geofacet::us_state_grid1 |>
  filter(!code %in% c("DC", "HI", "AK"))

# color palette ----
colors <- c("#4D1212", "#9A2828", "#DE5A2C", "#DE922C", "#DEC02C", 
            "#152473", "#243CB9", "#5287DE", "#77A3EA", "#ABCAFA")
            
# plot ----
all_states_plot <- drought_clean |> 
  
  # make wet condition values negative by multiplying by -1 ----
  mutate(perc_area = ifelse(test = grepl("D", condition) == T, yes = perc_area, no = perc_area * -1)) |>
  
  # plot ----
  ggplot(aes(x = date, y = perc_area, fill = condition_long)) +
  geom_area() +
  geofacet::facet_geo(~state_abb, grid = mygrid) +
  scale_fill_manual(values = colors)

all_states_plot
```
:::

## **Ex 3:**

:::